-- To run the HSQLDB Database tool:
-- java -cp <App install dir>/WEB-INF/lib/hsqldb.jar org.hsqldb.util.DatabaseManagerSwing
--
-- Driver settings:
--
-- Type: HSQLDB Database Engine Standalone
-- Driver: org.hsqldb.jdbcDriver
-- URL: jdbc:hsqldb:file:<file location. I use /opt/PingOne/Sample/db>
-- User: SA
-- Password: 2Federate
--
DROP TABLE Role IF EXISTS;
DROP TABLE USER IF EXISTS;
DROP TABLE Account IF EXISTS;
DROP TABLE Account_Domain IF EXISTS;
DROP TABLE User_Role IF EXISTS;
DROP TABLE User_Password IF EXISTS;
DROP TABLE User_Attribute IF EXISTS;
DROP TABLE Address IF EXISTS;

CREATE TABLE Role (
id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,
name varchar(32),
description varchar(255),
PRIMARY KEY (id),
UNIQUE (name)
);

CREATE TABLE Address (
id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,
name varchar(128),
street1 varchar(128),
street2 varchar(128),
city varchar(128),
region varchar(128),
country varchar(3),
postal varchar(12),
PRIMARY KEY (id),
);

CREATE TABLE Account (
id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,
name varchar(128),
addressId INTEGER,
ssoEnabled BOOLEAN DEFAULT false,
ssoIdpId varchar(128),
PRIMARY KEY (id),
UNIQUE (name),
CONSTRAINT fk_account_address FOREIGN KEY (addressId) REFERENCES Address (id)
);

CREATE TABLE Account_Domain (
id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,
accountId INTEGER,
domain varchar(128),
UNIQUE (domain)
);

CREATE TABLE User (
id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,
firstName varchar(128),
lastName varchar(128),
email varchar(128),
accountId INTEGER,
addressId INTEGER,
PRIMARY KEY (id),
UNIQUE (email),
CONSTRAINT fk_user_account FOREIGN KEY (accountId) REFERENCES Account (id),
CONSTRAINT fk_user_address FOREIGN KEY (addressId) REFERENCES Address (id)
);

CREATE TABLE User_Password(
userId INTEGER,
password varchar(32),
UNIQUE (userId)
);

CREATE TABLE User_Role (
userId INTEGER,
roleId INTEGER,
PRIMARY KEY (userId,roleId)
);

CREATE TABLE User_Attribute (
id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,
userId INTEGER,
attrKey varchar(128),
attrValue varchar(255),
PRIMARY KEY(id)
);

--
-- Add Roles
--
-- Id=1, name=super
INSERT INTO Role(name, description) VALUES('Supers', 'Super User. Limited to very special admins');
-- Id=2, name=admin
INSERT INTO Role(name, description) VALUES('Admins', 'Account administrator');
-- Id=3, name=user
INSERT INTO Role(name, description) VALUES('Users', 'Account user');

--
-- Add Accounts
--

-- Id=1, {{app.name}}
INSERT INTO Account (name) VALUES ('{{app.name}}');
-- Address Id=1
INSERT INTO Address (name, street1, street2,city,region,country,postal ) VALUES ('{{app.address.name}}','{{app.address.street1}}','{{app.address.street2}}', '{{app.address.region}}','{{app.address.province}}','{{app.address.country}}','{{app.address.postal}}');
UPDATE Account SET addressId=1 WHERE id=1;
-- Domain
INSERT INTO Account_Domain(accountId, domain) VALUES(1, '{{app.domain}}');

-- Id=2, {{app.basic.name}}
INSERT INTO Account (name) VALUES ('{{app.basic.name}}');
-- Address Id=2
INSERT INTO Address (name, street1, street2,city,region,country,postal ) VALUES ('{{app.basic.address.name}}','{{app.basic.address.street1}}','{{app.basic.address.street2}}', '{{app.basic.address.region}}','{{app.basic.address.province}}','{{app.basic.address.country}}','{{app.basic.address.postal}}');
UPDATE Account SET addressId=2 WHERE id=2;
-- Domain
INSERT INTO Account_Domain(accountId, domain) VALUES(2, '{{app.basic.domain}}');

-- Id=3, {{app.sso.name}}
INSERT INTO Account (name, ssoEnabled, ssoIdpId) VALUES ('{{app.sso.name}}',true, '{{app.sso.ssoIdpId}}');
-- Address Id=3
INSERT INTO Address (name, street1, street2,city,region,country,postal ) VALUES ('{{app.sso.address.name}}','{{app.sso.address.street1}}','{{app.sso.address.street2}}', '{{app.sso.address.region}}','{{app.sso.address.province}}','{{app.sso.address.country}}','{{app.sso.address.postal}}');
UPDATE Account SET addressId=3 WHERE id=3;
-- Domain
INSERT INTO Account_Domain(accountId, domain) VALUES(3, '{{app.sso.domain}}');

--
-- Users
--

-- Id=1, {{app.user1.user}}@{{app.domain}} - Super user
INSERT INTO User (firstName, lastName, email, accountId) VALUES ('{{app.user1.fname}}', '{{app.user1.lname}}', '{{app.user1.user}}@{{app.domain}}', 1);
-- Password
INSERT INTO User_Password (userId, password) VALUES (1, '{{app.user1.password}}');
-- Roles
INSERT INTO User_Role (userId, roleId) VALUES (1, 1);
INSERT INTO User_Role (userId, roleId) VALUES (1, 2);
INSERT INTO User_Role (userId, roleId) VALUES (1, 3);

-- Id=2, {{app.basic.user1.user}}@{{app.basic.domain}} - Admin
INSERT INTO User (firstName, lastName, email, accountId) VALUES ('{{app.basic.user1.fname}}', '{{app.basic.user1.lname}}', '{{app.basic.user1.user}}@{{app.basic.domain}}', 2);
-- Password
INSERT INTO User_Password (userId, password) VALUES (2, '{{app.basic.user1.password}}');
-- Roles
INSERT INTO User_Role (userId, roleId) VALUES (2, 2);
INSERT INTO User_Role (userId, roleId) VALUES (2, 3);

-- Id=3, {{app.basic.user2.user}}@{{app.basic.domain}} - Regular user
INSERT INTO User (firstName, lastName, email, accountId) VALUES ('{{app.basic.user2.fname}}', '{{app.basic.user2.lname}}', '{{app.basic.user2.user}}@{{app.basic.domain}}', 2);
-- Password
INSERT INTO User_Password (userId, password) VALUES (3, '{{app.basic.user2.password}}');
-- Roles
INSERT INTO User_Role (userId, roleId) VALUES (3, 3);
